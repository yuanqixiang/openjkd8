/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class java_lang_Thread */

#ifndef _Included_java_lang_Thread
#define _Included_java_lang_Thread
#ifdef __cplusplus
extern "C" {
#endif
#undef java_lang_Thread_MIN_PRIORITY
#define java_lang_Thread_MIN_PRIORITY 1L
#undef java_lang_Thread_NORM_PRIORITY
#define java_lang_Thread_NORM_PRIORITY 5L
#undef java_lang_Thread_MAX_PRIORITY
#define java_lang_Thread_MAX_PRIORITY 10L
/*
 * Class:     java_lang_Thread
 * Method:    registerNatives
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_registerNatives
  (JNIEnv *, jclass);

/*
 * Class:     java_lang_Thread
 * Method:    currentThread
 * Signature: ()Ljava/lang/Thread;
 */
JNIEXPORT jobject JNICALL Java_java_lang_Thread_currentThread
  (JNIEnv *, jclass);

/*
 * Class:     java_lang_Thread
 * Method:    yield
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_yield
  (JNIEnv *, jclass);

/*
 * Class:     java_lang_Thread
 * Method:    sleep
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_sleep
  (JNIEnv *, jclass, jlong);

/*
 * Class:     java_lang_Thread
 * Method:    start0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_start0
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    isInterrupted
 * Signature: (Z)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_isInterrupted
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     java_lang_Thread
 * Method:    isAlive
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_isAlive
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    countStackFrames
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_java_lang_Thread_countStackFrames
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    holdsLock
 * Signature: (Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_holdsLock
  (JNIEnv *, jclass, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    dumpThreads
 * Signature: ([Ljava/lang/Thread;)[[Ljava/lang/StackTraceElement;
 */
JNIEXPORT jobjectArray JNICALL Java_java_lang_Thread_dumpThreads
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:     java_lang_Thread
 * Method:    getThreads
 * Signature: ()[Ljava/lang/Thread;
 */
JNIEXPORT jobjectArray JNICALL Java_java_lang_Thread_getThreads
  (JNIEnv *, jclass);

/*
 * Class:     java_lang_Thread
 * Method:    setPriority0
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_setPriority0
  (JNIEnv *, jobject, jint);

/*
 * Class:     java_lang_Thread
 * Method:    stop0
 * Signature: (Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_stop0
  (JNIEnv *, jobject, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    suspend0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_suspend0
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    resume0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_resume0
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    interrupt0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_interrupt0
  (JNIEnv *, jobject);

/*
 * Class:     java_lang_Thread
 * Method:    setNativeName
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_setNativeName
  (JNIEnv *, jobject, jstring);

#ifdef __cplusplus
}
#endif
#endif
